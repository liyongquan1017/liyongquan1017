<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>测试工程师知识图谱</title>
    <url>/2020/05/30/QA2-%E6%B5%8B%E8%AF%95%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/</url>
    <content><![CDATA[<h1 id="测试工程师必备知识图谱"><a href="#测试工程师必备知识图谱" class="headerlink" title="测试工程师必备知识图谱"></a>测试工程师必备知识图谱</h1><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>有很多同学对于测试工程师必备的测试技能不是很清晰，对自己以后的规划也不是很明了，不知道自己到底该从哪个方向努力或发展，下面是我从其他大佬那找的测试工程师必备知识图谱，也许能能给大家带来一些帮助。</p>
<a id="more"></a>

<h3 id="图谱"><a href="#图谱" class="headerlink" title="图谱"></a>图谱</h3><p><img src="https://ssd.qiniu.dreamfly95.com/TesterSkillMap3.png" alt="TesterSkillMap3"></p>
<p><img src="https://ssd.qiniu.dreamfly95.com/TesterSkillMap2.png" alt="TesterSkillMap2">)<img src="https://ssd.qiniu.dreamfly95.com/TesterSkillMap1.png" alt="TesterSkillMap1"></p>
<p>​    来源：<a href="https://blog.csdn.net/timeorspace/article/details/69225354" target="_blank" rel="noopener">https://blog.csdn.net/timeorspace/article/details/69225354</a></p>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>面朝大海，春暖花开。</p>
<p>愿你一生努力，一生被爱。</p>
]]></content>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>测试用例的编写</title>
    <url>/2019/10/25/QA1-%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h3 id="测试用例设计方法"><a href="#测试用例设计方法" class="headerlink" title="测试用例设计方法"></a>测试用例设计方法</h3><ul>
<li><p>逐级细分法</p>
</li>
<li><p>输入域测试法</p>
</li>
<li><p>输出域分析法</p>
</li>
<li><p>正交试验设计法</p>
<a id="more"></a>
</li>
<li><p>业务流程分析法</p>
</li>
<li><p>状态迁移法</p>
</li>
<li><p>因果图法</p>
</li>
<li><p>判定表法</p>
</li>
<li><p>错误猜测法</p>
</li>
<li><p>等价类划分法 （等价类划分方法，是将所有可能的输入数据划分成若干个子集，在每个子集中，如果任意一个输入数据对于揭露程序中潜在错误都具有同等效果，那么这样的子集就构成了一个等价类。后续只要从每个等价类中任意选取一个值进行测试，就可以用少量具有代表性的测试输入取得较好的测试覆盖结果）</p>
</li>
<li><p>边界值分析法（边界值分析方法，是选取输入、输出的边界值进行测试。因为通常大量的软件错误是发生在输入或输出范围的边界上，所以需要对边界值进行重点测试，通常选取正好等于、刚刚大于或刚刚小于边界的值作为测试数据。 从方法论上可以看出来，边界值分析是对等价类划分的补充，所以这两种测试方法经常结合起来使用。</p>
</li>
</ul>
<hr>
<h4 id="‘用户登录’设计测试用例"><a href="#‘用户登录’设计测试用例" class="headerlink" title="‘用户登录’设计测试用例"></a>‘用户登录’设计测试用例</h4><blockquote>
<p>目标是要保证系统在各种应用场景下的功能是符合设计要求的，这样考虑的测试用例就需要更多、更全面。</p>
</blockquote>
<h5 id="基于等价类划分和边界值分析方法，我们设计的测试用例包括："><a href="#基于等价类划分和边界值分析方法，我们设计的测试用例包括：" class="headerlink" title="基于等价类划分和边界值分析方法，我们设计的测试用例包括："></a>基于等价类划分和边界值分析方法，我们设计的测试用例包括：</h5><ol>
<li>输入已注册的用户名和正确的密码，验证是否登录成功</li>
<li>输入已注册的用户名和不正确的密码，验证是否登录失败，并且提示信息正确</li>
<li>输入未注册的用户名和任意密码，验证是否登录失败，并且提示信息正确；</li>
<li>用户名和密码两者都为空，验证是否登录失败，并且提示信息正确</li>
<li>用户名和密码两者之一为空，验证是否登录失败，并且提示信息正确；</li>
<li>如果登录功能启用了验证码功能，在用户名和密码正确的前提下，输入正确的验证码，验证是否登录成功；</li>
<li>如果登录功能启用了验证码功能，在用户名和密码正确的前提下，输入错误的验证码，验证是否登录失败，并且提示信息正确。</li>
</ol>
<h5 id="需要弥补的测试用例"><a href="#需要弥补的测试用例" class="headerlink" title="需要弥补的测试用例"></a>需要弥补的测试用例</h5><ol>
<li>用户名和密码是否大小写敏感；</li>
<li>页面上的密码框是否加密显示；</li>
<li>后台系统创建的用户第一次登录成功时，是否提示修改密码</li>
<li>忘记用户名和忘记密码的功能是否可用</li>
<li>前端页面是否根据设计要求限制用户名和密码长度；</li>
<li>如果登录功能需要验证码，点击验证码图片是否可以更换验证码，更换后的验证码是否可用</li>
<li>刷新页面是否会刷新验证码；</li>
<li>如果验证码具有时效性，需要分别验证时效内和时效外验证码的有效性</li>
<li>用户登录成功但是会话超时后，继续操作是否会重定向到用户登录界面</li>
<li>不同级别的用户，比如管理员用户和普通用户，登录系统后的权限是否正确</li>
<li>页面默认焦点是否定位在用户名的输入框中</li>
<li>快捷键Tab和Enter等，是否可以正常使用</li>
</ol>
<h5 id="安全性测试用例包括"><a href="#安全性测试用例包括" class="headerlink" title="安全性测试用例包括"></a>安全性测试用例包括</h5><blockquote>
<p>一个质量过硬的软件系统，除了显式功能性需求以外，其他的非功能性需求即隐式功能性需求也是极其关键的。</p>
</blockquote>
<blockquote>
<p>显式功能性需求（Functional requirement）的含义从字面上就可以很好地理解，指的是软件本身需要实现的具体功能， 比如“正常用户使用正确的用户名和密码可以成功登录”、“非注册用户无法登录”等，这都是属于典型的显式功能性需求描述。</p>
</blockquote>
<blockquote>
<p>那什么是非功能性需求（Non-functional requirement）呢？从软件测试的维度来看，非功能性需求主要涉及安全性、性能以及兼容性三大方面。</p>
</blockquote>
<ol>
<li>用户密码后台存储是否加密</li>
<li>用户密码在网络传输过程中是否加密</li>
<li>密码是否具有有效期，密码有效期到期后，是否提示需要修改密码</li>
<li>不登录的情况下，在浏览器中直接输入登录后的URL地址，验证是否会重新定向到用户登录界面；</li>
<li>密码输入框是否不支持复制和粘贴；</li>
<li>密码输入框内输入的密码是否都可以在页面源码模式下被查看；</li>
<li>用户名和密码的输入框中分别输入典型的“SQL注入攻击”字符串，验证系统的返回页面；</li>
<li>用户名和密码的输入框中分别输入典型的“XSS跨站脚本攻击”字符串，验证系统行为是否被篡改；</li>
<li>连续多次登录失败情况下，系统是否会阻止后续的尝试以应对暴力破解；</li>\n 同一用户在同一终端的多种浏览器上登录，验证登录功能的互斥性是否符合设计预期；</li>
<li>同一用户先后在多台终端的浏览器上登录，验证登录是否具有互斥性。</li>
</ol>
<h5 id="性能压力测试用例包括"><a href="#性能压力测试用例包括" class="headerlink" title="性能压力测试用例包括:"></a>性能压力测试用例包括:</h5><ol>
<li>单用户登录的响应时间是否小于3秒；</li>
<li>单用户登录时，后台请求数量是否过多；</li>
<li>高并发场景下用户登录的响应时间是否小于5秒；</li>
<li>高并发场景下服务端的监控指标是否符合预期；</li>
<li>高集合点并发场景下，是否存在资源死锁和不合理的资源等待；</li>
<li>长时间大量用户连续登录和登出，服务器端是否存在内存泄漏。</li>
</ol>
<h5 id="兼容性测试用例包括："><a href="#兼容性测试用例包括：" class="headerlink" title="兼容性测试用例包括："></a>兼容性测试用例包括：</h5><ol>
<li>不同浏览器下，验证登录页面的显示以及功能正确性；</li>
<li>相同浏览器的不同版本下，验证登录页面的显示以及功能正确性；</li>
<li>不同移动设备终端的不同浏览器下，验证登录页面的显示以及功能正确性；</li>
<li>不同分辨率的界面下，验证登录页面的显示以及功能正确性。</li>
</ol>
]]></content>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>使用gitee自建图床</title>
    <url>/2020/04/15/%E6%8A%80%E5%B7%A72-%E8%87%AA%E5%BB%BA%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<h1 id="使用gitee建自己图床"><a href="#使用gitee建自己图床" class="headerlink" title="使用gitee建自己图床"></a>使用gitee建自己图床</h1><h3 id="使用gitee建自己图床的好处："><a href="#使用gitee建自己图床的好处：" class="headerlink" title="使用gitee建自己图床的好处："></a>使用gitee建自己图床的好处：</h3><ol>
<li><p>都在自己账号内，好管理。</p>
</li>
<li><p>支持https，避免使用HTTP而打开时网站提示不安全。</p>
</li>
<li><p>丢失概率低</p>
</li>
</ol>
<a id="more"></a>

<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ol>
<li>创建一个属于自己的<a href="https://gitee.com/" target="_blank" rel="noopener">gitee账户</a></li>
<li>然后就本地有git，这里有较为详细的<a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">git教程</a></li>
<li>然后配置本体ssh,并与远程库建立可信任连接</li>
</ol>
<h3 id="开始搭建图床"><a href="#开始搭建图床" class="headerlink" title="开始搭建图床"></a>开始搭建图床</h3><ol>
<li>打开自己的gitee,新建一个仓库</li>
</ol>
<p>   <img src="https://dreams_quan.gitee.io/images/images/blog/makeGitee1.png" alt="makeGitee1"></p>
<p>   <img src="https://dreams_quan.gitee.io/images/images/blog/makeGitee2.png" alt="makeGitee2"></p>
<ol start="2">
<li>创建完成后，新建一个文件，必须是index.html</li>
</ol>
<p>   <img src="https://dreams_quan.gitee.io/images/images/blog/makeGitee3.png" alt="makeGitee3"></p>
<p>   <img src="https://dreams_quan.gitee.io/images/images/blog/makeGitee4.png" alt="makeGitee4"></p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</span><br><span class="line">&lt;title&gt;我的图床首页&lt;/title&gt;</span><br><span class="line">&lt;meta name=&quot;description&quot; content=&quot;&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;author&quot; content=&quot;&quot;&gt;</span><br></pre></td></tr></table></figure>



<ol start="3">
<li>保存后，点击仓库上方的，服务=》‘Gitee Pages’，然后进去点击更新，等几秒钟，然后点击网站地址，就会跳转到一个空白的网页，图床基本就搭建完成了。</li>
</ol>
<p>   <img src="https://dreams_quan.gitee.io/images/images/blog/makeGitee5.png" alt="makeGitee5"></p>
<p>   <img src="https://dreams_quan.gitee.io/images/images/blog/makeGitee6.png" alt="makeGitee5"></p>
<ol start="4">
<li><p>然后自己搭建本地库，关联自己刚新建的gitee仓库，到时在自己的本地库新建个文件夹保存图片，保存完push到自己的远程 gitee库（或者直接在gitee自己建的仓库内）。</p>
<!--注意：每次push完或上传完图片都需要把第三步执行一遍，这样图片才能通过你的图床正常访问-->

<p>例如：我的网址是 ：<a href="https://dreams_quan.gitee.io/images，我新建的问价夹名字为images，图片名为" target="_blank" rel="noopener">https://dreams_quan.gitee.io/images，我新建的问价夹名字为images，图片名为</a> china.jpg，这时在执行完上面步骤后，你的图片就可以通过网址访问了 <a href="https://dreams_quan.gitee.io/images/images/china.jpg" target="_blank" rel="noopener">https://dreams_quan.gitee.io/images/images/china.jpg</a></p>
<blockquote>
<p>小技巧：你写macdown等文档时，可以先使用本地保存的图片，等文档写完后，把图片统一上传，然后把文档内的图片地址的前缀替换为链接地址就OK。例如本地地址为   /Desktop/image/images/blog/china.jpg，你只要把  /Desktop/image/images/blog/  全部替换为   <a href="https://dreams_quan.gitee.io/images/images/" target="_blank" rel="noopener">https://dreams_quan.gitee.io/images/images/</a>  就OK了</p>
</blockquote>
</li>
</ol>
<ol start="5">
<li>如果自己想让自己的图床首页好看点，就自己网上找个静态网页模板，然后自己动手改改里面的内容，push上去然后更新就OK。</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>像自建图床啦，自己搭建博客网站等，都可以自己练习的去整一下，每一个积累都会是你的财富，加油！！！</p>
]]></content>
      <tags>
        <tag>技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>代码管理(git,gitee,coding等)平台配置ssh</title>
    <url>/2019/10/25/%E6%8A%80%E5%B7%A71-%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0%E9%85%8D%E7%BD%AEssh/</url>
    <content><![CDATA[<h1 id="git-gitee-coding等平台配置ssh"><a href="#git-gitee-coding等平台配置ssh" class="headerlink" title="git,gitee,coding等平台配置ssh"></a>git,gitee,coding等平台配置ssh</h1><h3 id="git-gitee-coding等托管平台配置ssh的目的："><a href="#git-gitee-coding等托管平台配置ssh的目的：" class="headerlink" title="git,gitee,coding等托管平台配置ssh的目的："></a>git,gitee,coding等托管平台配置ssh的目的：</h3><p>配置好ssh后可以让你的电脑和git,gitee,coding等平台通讯的时候建立可信任的安全连接</p>
<a id="more"></a>

<p>###步骤：</p>
<ol>
<li><p>打开终端（windows下载<a href="https://gitforwindows.org/" target="_blank" rel="noopener">git windows 终端</a>，Mac直接用原生自带的terminal就OK）。</p>
<ul>
<li>输入<code>cd ~/.ssh</code></li>
<li>然后输入<code>ls</code>,查看是否有<code>id_rsa</code>和<code>id_rsa.pub</code></li>
</ul>
<p><img src="/Users/liyongquan/Desktop/image/images/blog/cdssh.png" alt=""></p>
<ul>
<li>如果有则执行第2部，如果没有上述两个文件就执行 <code>ssh-keygen -trsa -C xxxxx@XXX.com</code>(xxxxx@XXX.com为你注册github时的邮箱)，然后开始执行第二部</li>
</ul>
<!--注意：如果已有id_rsa和id_rsa.pub文件时，不要执行 ssh-keygen，不然会把你原有的ssh文件冲掉，原来配置过ssh的地方就失效了-->
</li>
<li><p>查看公钥内容</p>
<ul>
<li><p>执行<code>cat ~/.ssh/id_rsa.pub</code></p>
<p><img src="/Users/liyongquan/Desktop/image/images/blog/catssh.png" alt=""></p>
</li>
</ul>
</li>
<li><p>复制公钥内容，全部内容，以ssh-rsa开头的全部内容。粘贴至你所要建立安全连接的平台，这里咦gitee为例：</p>
<ul>
<li>打开<a href="https://gitee.com/" target="_blank" rel="noopener">gitee</a>并登陆账户,按下图操作</li>
</ul>
<p><img src="/Users/liyongquan/Desktop/image/images/blog/giteessh1.png" alt=""></p>
</li>
</ol>
<p>   <img src="/Users/liyongquan/Desktop/image/images/blog/giteessh2.png" alt=""></p>
<p>   <img src="/Users/liyongquan/Desktop/image/images/blog/giteessh3.png" alt=""></p>
<ul>
<li>然后点击保存就OK了，其他例如 github,gitlab等都一样</li>
</ul>
<ol start="4">
<li><p>测试是否连接成功</p>
<ul>
<li><p>终端执行 <code>ssh -T git@gitee.com</code>   (@后面的可以换成你想要连接的平台的网址就OK)</p>
</li>
<li><p>如果成功则会提示 You’ve successfully</p>
<p><img src="/Users/liyongquan/Desktop/image/images/blog/sshtest.png" alt=""></p>
</li>
</ul>
</li>
<li><p>完工！！！</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown的使用</title>
    <url>/2020/05/26/%E6%8A%80%E5%B7%A73-Markdown%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Markdown的使用"><a href="#Markdown的使用" class="headerlink" title="Markdown的使用"></a>Markdown的使用</h1><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。</p>
<p>Markdown 编写的文档后缀为 <code>.md</code>, <code>.markdown</code>，可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。当前许多网站都广泛使用 Markdown 来撰写帮助文档或是用于论坛上发表消息。例如：GitHub、简书等。</p>
<p>通俗一点讲，使用Markdown写文档可以让你的文档格式比较规范明了，看着比较优美，本文的教程就是用Markdown写的。</p>
<a id="more"></a>

<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>1.在线练习工具<a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="noopener">Cmd Markdown 编辑阅读器</a></p>
<p>2.客户端编写软件 <a href="https://typora.io/" target="_blank" rel="noopener">Typora</a></p>
<blockquote>
<p>注意 在线练习工具Cmd Markdown 编辑阅读器 和 客户端软件 Typora 有些语法会有差异大家自行甄别。</p>
</blockquote>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>给介绍几个常用的语法和最终的展示效果，具体的一些可以在 <a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="noopener">Cmd Markdown 编辑阅读器</a> 中查阅</p>
<h4 id="1-标题"><a href="#1-标题" class="headerlink" title="1.标题"></a>1.标题</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">语法：</span><br><span class="line"># 这是一级标题</span><br><span class="line">## 这是二级标题</span><br><span class="line">### 这是三级标题</span><br><span class="line">#### 这是四级标题</span><br><span class="line">##### 这是五级标题</span><br><span class="line">###### 这是六级标题</span><br></pre></td></tr></table></figure>

<p>展示效果：</p>
<p><img src="https://ssd.qiniu.dreamfly95.com/Markdown1.png" alt=""></p>
<h4 id="2-字体"><a href="#2-字体" class="headerlink" title="2.字体"></a>2.字体</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">语法：</span><br><span class="line">**这是加粗的文字**</span><br><span class="line">*这是倾斜的文字*`</span><br><span class="line">***这是斜体加粗的文字***</span><br><span class="line">~~这是加删除线的文字~~</span><br></pre></td></tr></table></figure>

<p>展示效果：</p>
<p><img src="https://ssd.qiniu.dreamfly95.com/Markdown2.png" alt=""></p>
<h4 id="3-引用"><a href="#3-引用" class="headerlink" title="3.引用"></a>3.引用</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">语法：</span><br><span class="line">&gt;这是引用的内容</span><br></pre></td></tr></table></figure>

<p>展示效果：</p>
<p><img src="https://ssd.qiniu.dreamfly95.com/Markdown3.png" alt=""></p>
<h4 id="4-超链接"><a href="#4-超链接" class="headerlink" title="4.超链接"></a>4.超链接</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">语法</span><br><span class="line">[超链接名](超链接地址 &quot;超链接title&quot;)</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">[百度](http://baidu.com)</span><br></pre></td></tr></table></figure>

<p>展示效果：</p>
<p><img src="https://ssd.qiniu.dreamfly95.com/Markdown4.png" alt=""></p>
<h4 id="5-图片"><a href="#5-图片" class="headerlink" title="5.图片"></a>5.图片</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![图片描述](图片地址 &apos;&apos;图片title&apos;&apos;)</span><br><span class="line"></span><br><span class="line">图片alt就是显示在图片下面的文字，相当于对图片内容的解释，可加可不加</span><br><span class="line">图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line"></span><br><span class="line">![风景](https://ss0.bdstatic.com/94oJfD_bAAcT8t7mm9GUKT-xh_/timg?image&amp;quality=100&amp;size=b4000_4000&amp;sec=1590818510&amp;di=f0e6467d2588dd1434e9fbb151653570&amp;src=http://www.wndhw.com/fengjing/shanshui/images/ss003t4.jpg &quot;风景&quot;)</span><br></pre></td></tr></table></figure>

<p>展示效果：</p>
<p><img src="https://ssd.qiniu.dreamfly95.com/Markdown5.png" alt=""></p>
<h4 id="6-代码块"><a href="#6-代码块" class="headerlink" title="6.代码块"></a>6.代码块</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">语法：</span><br><span class="line"></span><br><span class="line">`代码内容`</span><br></pre></td></tr></table></figure>
<p> 我是代码块<br> 我是代码块<br> 我是代码块<br> 我是代码块<br> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p>展示效果：</p>
<p><img src="https://ssd.qiniu.dreamfly95.com/Markdown6.png" alt=""></p>
<p>以上是一些基本常用的。其他的语法大家可以在  <a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="noopener">Cmd Markdown 编辑阅读器</a> 中查阅。</p>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>面朝大海，春暖花开。</p>
<p>愿你一生努力，一生被爱。</p>
]]></content>
      <tags>
        <tag>技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>我的祖国</title>
    <url>/2020/06/01/%E8%AF%BB%E4%B9%A61-%E6%88%91%E7%9A%84%E7%A5%96%E5%9B%BD/</url>
    <content><![CDATA[<p><img src="https://dreams_quan.gitee.io/images/images/blog/china.jpg" alt=""></p>
<p>我和我的祖国</p>
<p>一刻也不能分割</p>
<p>无论我走到哪里</p>
<p>都流出一首赞歌</p>
<a id="more"></a>

<p>我歌唱每一座高山</p>
<p>我歌唱每一条河</p>
<p>袅袅炊烟 小小村落</p>
<p>路上一道辙</p>
<p>我最亲爱的祖国</p>
<p>我永远紧依着你的心窝</p>
<p>你用你那母亲的脉搏</p>
<p>和我诉说</p>
<p>我的祖国和我</p>
<p>像海和浪花一朵</p>
<p>浪是那海的赤子</p>
<p>海是那浪的依托</p>
<p>每当大海在微笑</p>
<p>我就是笑的旋涡</p>
<p>我分担着海的忧愁</p>
<p>分享海的欢乐</p>
<p>我最亲爱的祖国</p>
<p>你是大海永不干涸</p>
<p>永远给我碧浪清波</p>
<p>心中的歌</p>
]]></content>
      <tags>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>能力陷进</title>
    <url>/2019/10/25/%E8%AF%BB%E4%B9%A62-%E8%83%BD%E5%8A%9B%E9%99%B7%E8%BF%9B/</url>
    <content><![CDATA[<p><img src="https://dreams_quan.gitee.io/images/images/blog/NLXJ.png" alt=""></p>
<p>​         本书深刻揭示职场的三大观念陷阱，提出“先行动，后思考”的方法，打破了传统领导者的养成法则，帮助那些渴望成为优秀领导者的人学会如何扩展业务范围，如何提出更好的策略性意见，以及如何扩建人际关系网络并引领他们朝着不同的方向发展自己。</p>
<a id="more"></a>

<ol>
<li><p>很多需要紧急处理的事情限制着你，让你没有办法去做那些更重要的事。但是在努力学会做好一个领导者的问题上，你面临着一个更大的挑战：那就是只有先行动起来，你才能知道关于自己，关于工作你需要做些什么，而不仅仅是思考。</p>
</li>
<li><p>如果我们想要成为一名优秀的领导者，就要学会“先行动后思考”。这与我们普遍所熟知的学习顺序的矛盾在于，在改变的过程中，我们会先看到结果，即改变让我们产生了什么样的感受，身边的人对我们的改变有什么样的反应，之后我们才会开始思考，把外在经历内在化。换句话说，我们要先在行为上表现得像一个领导者，而后才会像领导者一样去思考。</p>
</li>
<li><p>做领导者所做的工作会引发两个重要的转变过程：一是外在转变过程；二是内在转变过程。它们之间是紧密相连的。外在转变过程指的是建立起一个有潜力或有能力的好名声，这能够在很大程度上改变我们的自我认知；而内在转变过程涉及内在动机和自我定位的转变，这种转变并不是独立发生的，而是在与他人所建立的关系中渐渐发生的转变。</p>
</li>
<li><p>为了成为一名优秀的领导者，你要学会像领导者一样去思考。</p>
</li>
<li><p>你思考的方式来源于你过去的经历。</p>
</li>
<li><p>改变你想法的唯一方法就是去做与之前不一样的事情。</p>
</li>
<li><p>去做——而不仅仅是去想——才会增强你的外在表现力，而这些外在表现力是一个领导者所必需的。</p>
</li>
<li><p>稳定的“三脚架”（tripod）关系能提升你的外在表现力：新工作、新关系以及新自我。</p>
</li>
<li><p>我们很乐于去做那些我们擅长的事，于是就会一直去做，最终就使得我们会一直擅长那些事。做得越多，就越擅长，越擅长就越愿意去做。这样的一个循环能让我们在这方面获得更多的经验。而它就像是毒品一样，我们被它深深吸引，因为我们的快乐和自信都来源于它。它还会让我们产生误区，让我们相信我们擅长的事就是最有价值的且最重要的事，所以值得我们花时间去做。</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>接口测试之模拟抽奖概率计算（3）</title>
    <url>/2020/05/31/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%953%E4%B9%8B%E6%A8%A1%E6%8B%9F%E6%8A%BD%E5%A5%96%E6%A6%82%E7%8E%87%E8%AE%A1%E7%AE%97/</url>
    <content><![CDATA[<h1 id="接口测试之模拟抽奖概率计算（3）"><a href="#接口测试之模拟抽奖概率计算（3）" class="headerlink" title="接口测试之模拟抽奖概率计算（3）"></a>接口测试之模拟抽奖概率计算（3）</h1><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在很多公司测试过程中会有抽奖概率测试，如果用手动去模拟，会很不现实，一般都是从接口入手，模拟跑1万到10万次或者更多，来计算概率是否符合预期。本教程先不涉及接口，只是单纯的去了解一下怎么取计算抽奖概率。</p>
<a id="more"></a>

<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>1.一个包含各种奖项的奖池。</p>
<p>2.了解随机模块<a href="https://www.runoob.com/python/func-number-random.html" target="_blank" rel="noopener">random</a>的用法</p>
<p>3.了解 <a href="https://blog.csdn.net/u013216667/article/details/51316971" target="_blank" rel="noopener">python格式化%s,%d,%f</a></p>
<h3 id="具体示例"><a href="#具体示例" class="headerlink" title="具体示例"></a>具体示例</h3><p>我们这里设计一个含有6种不同奖项的列表，然后随机抽取1万次，然后计算各个奖品的概率，具体如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">奖项列表：</span></span><br><span class="line"><span class="string">编号  奖品</span></span><br><span class="line"><span class="string">1    土豪女友/男友</span></span><br><span class="line"><span class="string">2    私人庄园</span></span><br><span class="line"><span class="string">3    海景别墅</span></span><br><span class="line"><span class="string">4    劳斯莱斯</span></span><br><span class="line"><span class="string">5    iPhone12</span></span><br><span class="line"><span class="string">6    纸巾一包</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">设计思路：</span></span><br><span class="line"><span class="string">把所有奖品ID放一个列表，然后随机抽取，一共抽10000次，计算抽奖结果。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># 1.定义一个抽奖列表，有抽奖编号组成</span></span><br><span class="line">rewardIds = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="comment"># 2.抽取10000次，并把抽到的结果放到一个列表内，</span></span><br><span class="line"><span class="comment"># 定义单次抽奖列表组合为lotteryResult,抽奖次数为：num1</span></span><br><span class="line">lotteryResultSimple = []</span><br><span class="line">num1 = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10000</span>):</span><br><span class="line">    <span class="comment"># 每次只抽一个奖品时</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    从每次随机从列表取一个元素，用 random.choice(),</span></span><br><span class="line"><span class="string">    取出的元素类型为元素本身的类型</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    a = random.choice(rewardIds)</span><br><span class="line">    lotteryResultSimple.append(a)</span><br><span class="line">    num1+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义每次抽多个奖品，抽奖奖励集合为lotteryResultMore,抽奖次数为：num2</span></span><br><span class="line">lotteryResultMore = []</span><br><span class="line">num2 = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">10000</span>):</span><br><span class="line">    <span class="comment">#每次只抽一个奖品时</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    从每次随机从列表取n个元素，用 random.sample(list,N)</span></span><br><span class="line"><span class="string">    list所要去随机元素的数列，N为每次要取的数</span></span><br><span class="line"><span class="string">    这时取出的随机元素，是一个数列</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    b = random.sample(rewardIds,<span class="number">2</span>)</span><br><span class="line">    <span class="comment"># 因为b是一个数列，所以不能用append把抽奖结果加进去了</span></span><br><span class="line">    lotteryResultMore = lotteryResultMore + b</span><br><span class="line">    num2 += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义总抽奖次数为 num,所有奖品集合为lotteryResult</span></span><br><span class="line">num = num1 + num2</span><br><span class="line">lotteryResult = lotteryResultMore + lotteryResultSimple</span><br><span class="line"></span><br><span class="line"><span class="comment"># 总共抽到的奖品数量为 lotteryResultCount</span></span><br><span class="line">lotteryResultCount = len(lotteryResult)</span><br><span class="line"><span class="comment"># 抽到土豪女友/男友的次数</span></span><br><span class="line">rewardId1 = lotteryResult.count(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 抽到私人庄园的次数</span></span><br><span class="line">rewardId2 = lotteryResult.count(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 抽到海景别墅的次数</span></span><br><span class="line">rewardId3 = lotteryResult.count(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 抽到劳斯莱斯的次数</span></span><br><span class="line">rewardId4 = lotteryResult.count(<span class="number">4</span>)</span><br><span class="line"><span class="comment"># 抽到iPhone12的次数</span></span><br><span class="line">rewardId5 = lotteryResult.count(<span class="number">5</span>)</span><br><span class="line"><span class="comment"># 抽到纸巾的次数</span></span><br><span class="line">rewardId6 = lotteryResult.count(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'共抽奖%s次，其中单抽%s次，二连抽%s次，共抽到奖品%s个'</span>%(num,num1,num2,lotteryResultCount))</span><br><span class="line">print(<span class="string">"*"</span>*<span class="number">30</span>)  <span class="comment"># 此处就是打印一个分割线</span></span><br><span class="line">print(<span class="string">'抽到土豪女友/男友的概率为    %.2f%%'</span>%(rewardId1/lotteryResultCount*<span class="number">100</span>))</span><br><span class="line">print(<span class="string">'抽到私人庄园的概率为        %.2f%%'</span>%(rewardId2/lotteryResultCount*<span class="number">100</span>))</span><br><span class="line">print(<span class="string">'抽到海景别墅的概率为        %.2f%%'</span>%(rewardId3/lotteryResultCount*<span class="number">100</span>))</span><br><span class="line">print(<span class="string">'抽到劳斯莱斯的概率为        %.2f%%'</span>%(rewardId4/lotteryResultCount*<span class="number">100</span>))</span><br><span class="line">print(<span class="string">'抽到iPhone12的概率为      %.2f%%'</span>%(rewardId5/lotteryResultCount*<span class="number">100</span>))</span><br><span class="line">print(<span class="string">'抽到纸巾的概率为           %.2f%%'</span>%(rewardId6/lotteryResultCount*<span class="number">100</span>))</span><br></pre></td></tr></table></figure>

<p>以上就是一个概率的计算，以及结果的展示，具体用到的也就是一些基础知识，实际使用抽奖接口去抽奖并计算概率时，需要考虑的东西还有很多，我们后续再讲。</p>
<p><strong>小知识</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#其他输出格式化例如 %s啦，%d基本大同小异，大家自行搜索练习 </span></span><br><span class="line"></span><br><span class="line">a = <span class="number">0.222222222</span></span><br><span class="line">print(<span class="string">"a显示小数点后两位：%.2f"</span>%a)</span><br><span class="line"><span class="comment"># 输出为： a显示小数点后两位：0.22</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"a显示小数点后5位： %.5f"</span>%a)</span><br><span class="line"><span class="comment"># 输出为：a显示小数点后5位： 0.22222</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"以百分号形式输出并保留小数点后两位 %.2f%%"</span>%(a*<span class="number">100</span>))</span><br><span class="line"><span class="comment"># 输出为： 以百分号形式输出并保留小数点后两位 22.22%</span></span><br></pre></td></tr></table></figure>



<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>面朝大海，春暖花开。</p>
<p>愿你一生努力，一生被爱。</p>
]]></content>
      <tags>
        <tag>接口测试</tag>
      </tags>
  </entry>
  <entry>
    <title>接口测试之requests用法（2）</title>
    <url>/2020/05/27/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%952%E4%B9%8BRequests%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<h1 id="接口测试之Requests用法"><a href="#接口测试之Requests用法" class="headerlink" title="接口测试之Requests用法"></a>接口测试之Requests用法</h1><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>要学接口自动化，或者爬虫等，Requests库的使用是必备知识，也是给你打开自动化大门的一把钥匙。</p>
<p>Requests的口号是为人类服务，也是唯一的一个<strong>非转基因</strong>的 Python HTTP 库，人类可以安全享用。</p>
<a id="more"></a>

<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>1.<a href="https://cn.python-requests.org/zh_CN/latest/user/install.html" target="_blank" rel="noopener">安装Requests库方法</a></p>
<p>2.<a href="https://cn.python-requests.org/zh_CN/latest/user/quickstart.html" target="_blank" rel="noopener">Requests的官方文档</a></p>
<p>3.可用于练习的免费接口：<a href="https://www.juhe.cn/docs" target="_blank" rel="noopener">聚合数据免费接口</a>（打开在筛选页，选择免费的，然后申请下就可以用了），<a href="https://api.apiopen.top/api.html" target="_blank" rel="noopener">其他免费接口</a>（由于被人乱刷，导致部分接口已被封禁）</p>
<p>4.了解<a href="https://www.jianshu.com/p/55c8708da06c" target="_blank" rel="noopener">get和post的区别</a></p>
<h3 id="具体示例"><a href="#具体示例" class="headerlink" title="具体示例"></a>具体示例</h3><p>我们已 qq号测吉凶为例来演示Requests的基本用法，<a href="https://www.juhe.cn/docs/api/id/166" target="_blank" rel="noopener">qq号测吉凶API地址</a>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">网址：https://www.juhe.cn/docs/api/id/166</span></span><br><span class="line"><span class="string">接口地址：http://japi.juhe.cn/qqevaluate/qq</span></span><br><span class="line"><span class="string">返回格式：json</span></span><br><span class="line"><span class="string">请求方式：get post</span></span><br><span class="line"><span class="string">请求示例：http://japi.juhe.cn/qqevaluate/qq?key=您申请的appKey&amp;qq=295424589</span></span><br><span class="line"><span class="string">接口备注：根据传入的参数qq号码和您申请的appKey测试qq的吉凶</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">名称 必填 类型 说明</span></span><br><span class="line"><span class="string">key    是  string 您申请的appKey</span></span><br><span class="line"><span class="string">qq 是  string 需要测试的QQ号码</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">该接口支持get和 post请求</span></span><br><span class="line"><span class="string">上面key需要自己注册账号后申请，是免费的。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.先来联系get请求,</span></span><br><span class="line"><span class="comment"># 方式一：直接请求,在请求地址后面直接拼接请求参数</span></span><br><span class="line">rGet1 = requests.get(<span class="string">'http://japi.juhe.cn/qqevaluate/qq?key=你申请的appkey&amp;qq=要测试的QQ'</span>).json()</span><br><span class="line"><span class="comment"># print(rGet1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式二：定义请求参数，然后使用get请求</span></span><br><span class="line">params = &#123;<span class="string">'key'</span>:<span class="string">'你申请的appkey'</span>,</span><br><span class="line">          <span class="string">'qq'</span>:<span class="string">'要测试的QQ'</span>&#125;</span><br><span class="line">rGet2 = requests.get(<span class="string">'http://japi.juhe.cn/qqevaluate/qq'</span>,params=params).json()</span><br><span class="line"><span class="comment"># print(rGet2)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.用post请求来</span></span><br><span class="line">data = &#123;<span class="string">'key'</span>:<span class="string">'你申请的appkey'</span>,</span><br><span class="line">          <span class="string">'qq'</span>:<span class="string">'要测试的QQ'</span>&#125;</span><br><span class="line">rPost = requests.post(<span class="string">'http://japi.juhe.cn/qqevaluate/qq'</span>,data=data).json()</span><br><span class="line">print(rPost)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取出QQ的测试结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式一</span></span><br><span class="line">qqResult = rPost[<span class="string">'result'</span>][<span class="string">'data'</span>][<span class="string">'conclusion'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式二，具体为何用get可以自行查阅资料</span></span><br><span class="line">qqResult1 = rPost.get(<span class="string">'result'</span>).get(<span class="string">'data'</span>).get(<span class="string">'conclusion'</span>)</span><br><span class="line"></span><br><span class="line">print(qqResult1)</span><br></pre></td></tr></table></figure>

<p>以上就是Requests 的基本用法，以后在编码过程中也要学会查看函数参数和方法。</p>
<p>学会Requests的用法就可以对接口做一些基本的操作了。</p>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>面朝大海，春暖花开。</p>
<p>愿你一生努力，一生被爱。</p>
]]></content>
      <tags>
        <tag>接口测试</tag>
      </tags>
  </entry>
  <entry>
    <title>接口测试之构造请求参数（1）</title>
    <url>/2020/05/25/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%951%E4%B9%8B%E6%9E%84%E9%80%A0%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<h1 id="接口测试之构造请求参数（1）"><a href="#接口测试之构造请求参数（1）" class="headerlink" title="接口测试之构造请求参数（1）"></a>接口测试之构造请求参数（1）</h1><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>接口测试中，我们需要去手动输入请求参数组合，因为输入法等问题，可能会造成标点或括号等输错，最后出错后，还不大好排查。因此我们通过构造请求参数，能大大避免这类问题的发生。这也是最基础的知识，</p>
<blockquote>
<p>另我们使用Postman输入请求参数时，也可以先用Python构造请求参数，然后再使用。不过这个因人而异，如果你对自己有信心，直接手拼也OK。</p>
</blockquote>
<a id="more"></a>

<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ol>
<li>Python3.0 + 编译工具（推荐Pycharm）</li>
<li>了解Python  <a href="https://www.runoob.com/python/python-dictionary.html" target="_blank" rel="noopener">dict（字典)</a>，<a href="https://www.runoob.com/python/python-lists.html" target="_blank" rel="noopener">list（列表)</a>，<a href="https://www.runoob.com/python/python-json.html" target="_blank" rel="noopener">json</a>等的基本知识</li>
</ol>
<h3 id="具体示例"><a href="#具体示例" class="headerlink" title="具体示例"></a>具体示例</h3><p>假如一个请求内的请求参数表如下，我们无需去管这个是哪个接口的参数，也不用管里面的内容，我们的目的是了解参数的构造，以及对一些基本知识的应用。</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>类型</th>
<th>是否必传</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>string</td>
<td>是</td>
<td>用户ID。例如：520</td>
</tr>
<tr>
<td>comment</td>
<td>string</td>
<td>是</td>
<td>发布内容</td>
</tr>
<tr>
<td>tagIdList</td>
<td>Jsonlist</td>
<td>是</td>
<td>使用标签，标签ID可传多个。如       [{‘tagid’:1},{‘tagid’:2}]</td>
</tr>
<tr>
<td>otherIDinfo</td>
<td>Jsonlist</td>
<td>是</td>
<td>@其他的人信息                      [{‘id’:’123’,’name’:’梦想’},{‘id:’456’,’name’:’飞翔’}]</td>
</tr>
<tr>
<td>button_type</td>
<td>String</td>
<td>是</td>
<td>按钮位置   朋友圈：friend   广场：square</td>
</tr>
<tr>
<td>type</td>
<td>Int</td>
<td>是</td>
<td>是否开放   开放：1     不开放：0</td>
</tr>
</tbody></table>
<p>具体代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">接下来我们我们开始构造一个请求参数，具体需要传入的值如下：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">用户ID为             456</span></span><br><span class="line"><span class="string">发布内容为            构造参数</span></span><br><span class="line"><span class="string">使用的标签ID为        1，2和3</span></span><br><span class="line"><span class="string">@的人的信息为(前面为名字，后面为ID)    梦想，123  飞翔，456</span></span><br><span class="line"><span class="string">开放类型为           不开放</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># 1.定义一个字典类型testDict，用于存放整个请求参数</span></span><br><span class="line">testDict = &#123;&#125;</span><br><span class="line"><span class="comment"># 2.请求参数中加入用户ID,ID为string类型</span></span><br><span class="line">testDict[<span class="string">'id'</span>] = <span class="string">'456'</span></span><br><span class="line"><span class="comment"># 3.请求参数中加入发布内容comment，为string类型</span></span><br><span class="line">testDict[<span class="string">'comment'</span>]= <span class="string">'构造参数'</span></span><br><span class="line"><span class="comment"># 4.请求参数中加入标签tagIdList，因为标签是list类型，因为我们要传入三个标签，所以需要拼接</span></span><br><span class="line">tagIdlists = []     <span class="comment">#定义一个存放标签集的list</span></span><br><span class="line">tagids = &#123;&#125;         <span class="comment">#定义一个存放ID的字典</span></span><br><span class="line">tagids[<span class="string">'tagid'</span>] =<span class="number">1</span>  <span class="comment">#加入标签为1的标签</span></span><br><span class="line"><span class="comment">#把标签为1拼接 到标签集里面，使用json.dumps的原因是把字典转换为字符串格式，避免后面tagids['tagid']赋值时把前面覆盖</span></span><br><span class="line">tagIdlists.append(json.dumps(tagids))</span><br><span class="line">tagids[<span class="string">'tagid'</span>] =<span class="number">2</span></span><br><span class="line">tagIdlists.append(json.dumps(tagids))  <span class="comment">#把标签为2拼接 到标签集里面</span></span><br><span class="line">tagids[<span class="string">'tagid'</span>] =<span class="number">3</span></span><br><span class="line">tagIdlists.append(json.dumps(tagids))  <span class="comment">#把标签为3拼接 到标签集里面</span></span><br><span class="line">testDict[<span class="string">'tagIdList'</span>] = tagIdlists  <span class="comment"># 把标签集加入到我们的请求参数内</span></span><br><span class="line"><span class="comment"># 5.请求参数中加入需要@的人的信息otherIDinfo,基本和步骤四类似</span></span><br><span class="line">otherInfos =[]</span><br><span class="line">otherIn = &#123;&#125;</span><br><span class="line">otherIn[<span class="string">'id'</span>] = <span class="string">'123'</span></span><br><span class="line">otherIn[<span class="string">'name'</span>] = <span class="string">'梦想'</span></span><br><span class="line">otherInfos.append(json.dumps(otherIn,ensure_ascii=<span class="literal">False</span>))</span><br><span class="line">otherIn[<span class="string">'id'</span>] = <span class="string">'456'</span></span><br><span class="line">otherIn[<span class="string">'name'</span>] = <span class="string">'飞翔'</span></span><br><span class="line">otherInfos.append(json.dumps(otherIn,ensure_ascii=<span class="literal">False</span>))</span><br><span class="line">testDict[<span class="string">'otherIDinfo'</span>] = otherInfos <span class="comment"># 把需要@的人的信加入到我们的请求参数内</span></span><br><span class="line"><span class="comment"># 6.请求参数中加入 是否开放的信息</span></span><br><span class="line">testDict[<span class="string">'type'</span>] = <span class="number">0</span></span><br><span class="line"><span class="comment"># 7.把请求参数转换为json格式</span></span><br><span class="line">print(testDict)</span><br></pre></td></tr></table></figure>

<p>此时打印出来的为：</p>
<blockquote>
<p>{‘id’: ‘456’, ‘comment’: ‘构造参数’, ‘tagIdList’: [‘{“tagid”: 1}’, ‘{“tagid”: 2}’, ‘{“tagid”: 3}’], ‘otherIDinfo’: [‘{“id”: “123”, “name”: “梦想”}’, ‘{“id”: “456”, “name”: “飞翔”}’], ‘type’: 0}</p>
</blockquote>
<p>这时我们打印出来的实际为字典类型，实际中我们需要传入的请求参数为json格式，所以我们需要把字典转换为json格式，我们可以在代码最后加入两行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 7.把请求参数转换为json格式</span></span><br><span class="line">testDict = json.dumps(testDict)</span><br><span class="line">print(testDict)</span><br></pre></td></tr></table></figure>

<p>这时打印出来的如下</p>
<blockquote>
<p>{“id”: “456”, “comment”: “\u6784\u9020\u53c2\u6570”, “tagIdList”: [“{&quot;tagid&quot;: 1}”, “{&quot;tagid&quot;: 2}”, “{&quot;tagid&quot;: 3}”], “otherIDinfo”: [“{&quot;id&quot;: &quot;123&quot;, &quot;name&quot;: &quot;\u68a6\u60f3&quot;}”, “{&quot;id&quot;: &quot;456&quot;, &quot;name&quot;: &quot;\u98de\u7fd4&quot;}”], “type”: 0}</p>
</blockquote>
<p>我们发现转换后出现，汉字变为Unicode码的问题，这时我们需要在转换时，加入一个参数<code>ensure_ascii=False</code>避免中文转为Unicode码。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 7.把请求参数转换为json格式</span></span><br><span class="line">testDict = json.dumps(testDict,ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">print(testDict)</span><br></pre></td></tr></table></figure>

<p>这时打印出来的就是符合规范的请求参数</p>
<blockquote>
<p>{“id”: “456”, “comment”: “构造参数”, “tagIdList”: [“{&quot;tagid&quot;: 1}”, “{&quot;tagid&quot;: 2}”, “{&quot;tagid&quot;: 3}”], “otherIDinfo”: [“{&quot;id&quot;: &quot;123&quot;, &quot;name&quot;: &quot;梦想&quot;}”, “{&quot;id&quot;: &quot;456&quot;, &quot;name&quot;: &quot;飞翔&quot;}”], “type”: 0}</p>
</blockquote>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>面朝大海，春暖花开。</p>
<p>愿你一生努力，一生被爱。</p>
]]></content>
      <tags>
        <tag>接口测试</tag>
      </tags>
  </entry>
  <entry>
    <title>测试全流程图解</title>
    <url>/2020/05/30/QA3-%E6%B5%8B%E8%AF%95%E5%85%A8%E6%B5%81%E7%A8%8B%E5%9B%BE%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="测试全流程图解"><a href="#测试全流程图解" class="headerlink" title="测试全流程图解"></a>测试全流程图解</h1><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>对于测试流程，大部分做测试的同学都能说个七七八八，但是对于一些细节，可能还是一知半解的，以下是对测试全流程整理的一个图谱，应该可以给大家带来一些帮助，如有不妥的地方，烦请指正。</p>
<a id="more"></a>

<h3 id="图谱"><a href="#图谱" class="headerlink" title="图谱"></a>图谱</h3><p><img src="https://ssd.qiniu.dreamfly95.com/image-20200530184050663.png" alt="image-20200530184050663"></p>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>面朝大海，春暖花开。</p>
<p>愿你一生努力，一生被爱。</p>
]]></content>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
</search>
